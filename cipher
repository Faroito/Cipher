#!/usr/bin/env python

#"Just because I don't care doesn't mean I don't understand." "Homer S" 0

import sys
import math
from fractions import Fraction
from fractions import gcd
from server import server_lauch

def calcul_det(matrix):
    result = (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0])
    return result

def min_matrix(exept_c, matrix, n, sign):
    c = 0
    l = 1
    c_tmp = 0
    l_tmp = 0
    matrix_tmp = [[0] * (n - 1) for _ in range(n - 1)]
    while l_tmp < n - 1:
        while c_tmp < n - 1:
            if c == exept_c:
                c = c + 1
            matrix_tmp[l_tmp][c_tmp] = matrix[l][c]
            c = c + 1
            c_tmp = c_tmp + 1
        c_tmp = 0
        c = 0
        l_tmp = l_tmp + 1
        l = l + 1
    if n == 3:
        result = calcul_det(matrix_tmp)
        result = sign * matrix[0][exept_c] * result
        return result
    else:
        return sign * matrix[0][exept_c], matrix_tmp

def det_matrix(matrix, n, result):
    c = 0
    matrix_tmp = 0
    sign = 1
    result = 0
    fact = 1
    print matrix
    if n == 2:
        return calcul_det(matrix)
    while c < n and n > 2:
        if n > 3:
            fact, matrix_tmp = min_matrix(c, matrix, n, sign)
            result = result + (det_matrix(matrix_tmp, (n - 1), result) * fact)
            sign = sign * -1
            c = c + 1
        else:
            result = result + min_matrix(c, matrix, n, sign)
            sign = sign * -1
            c = c + 1
    return result
    
def matrix_create(l_max, c_max, matrix, string, m_type):
    i = 0
    c = 0
    l = 0
    while l < l_max:
        while c < c_max:
            if m_type == 0:
                matrix[l][c] = ord(string[i])
            else:
                matrix[l][c] = string[i]
            c = c + 1
            i = i + 1
        c = 0
        l = l + 1
    return matrix

def with_zero(string, n):
    while len(string) % n != 0:
        string = string + str('\0')
    return string

def with_zero_bis(string, n):
    while len(string) % n != 0:
        string.append(0) 
    return string

def square_zero(string, n):
    while len(string) % pow(n, 2) != 0:
        string = string + str('\0')
    return string

def size_square(string):
    n = 2
    while (pow(n, 2) < len(string)):
        n = n + 1;
    return n

def size(string, n):
    size = len(string) / n
    return size

def print_matrix(l_max, c_max, matrix, type_m):
    c = 0
    l = 0
    while l < l_max:
        while c < c_max:
            if c < c_max - 1:
                if type_m == 0:
                    print "%.f \t" %(matrix[l][c]),
                elif matrix[l][c] == 0:
                    print "%.1f \t" %(matrix[l][c]),
                else:
                    print "%.3f \t" %(matrix[l][c]),
            else:
                if type_m == 0:
                    print "%.f \t" %(matrix[l][c])
                elif matrix[l][c] == 0:
                    print "%.1f \t" %(matrix[l][c])
                else:
                    print "%.3f \t" %(matrix[l][c])                    
            c = c + 1
        c = 0
        l = l + 1

def matrix_calcul(l, c, matrix_msg, matrix_key, square_size):
    result = 0
    i = 0
    while i < square_size:
        result = result + (matrix_msg[i][c] * matrix_key[l][i])
        i = i + 1
    print str(result),

def crypting(l_max, c_max, matrix_msg, matrix_key):
    c = 0
    l = 0
    while l < l_max:
        while c < c_max:
            matrix_calcul(l, c, matrix_msg, matrix_key, c_max)
            c = c + 1
        c = 0
        l = l + 1

def matrix_calcul_bis(l, c, matrix_msg, matrix_key, square_size):
    result = 0
    i = 0
    while i < square_size:
        result = result + (matrix_msg[i][c] * matrix_key[l][i])
        i = i + 1
    if (0 <= int(result) and int(result) <= 127):
        if gcd(result, 1) == 1:
            return (unichr(int(result)), 0)
        else:
            return (unichr(0), 1)
    else:
        return (unichr(0), 1)

def print_string(string):
    i = 0
    while i < len(string):
        sys.stdout.write(string[i])
        i = i + 1
    print ""
        
def decrypting(l_max, c_max, matrix_msg, matrix_key):
    c = 0
    l = 0
    end = 0
    string = []
    while l < l_max and end == 0:
        while c < c_max and end == 0:
            tmp, tmp2 = matrix_calcul_bis(l, c, matrix_msg, matrix_key, c_max)
            end = end + tmp2
            string.append(tmp)
            c = c + 1
        c = 0
        l = l + 1
    if end == 0:
        print_string(string)

def matrix_det(matrix_key, det, square_size, exept_c, exept_l):
    matrix_tmp = [[0] * (square_size - 1) for _ in range(square_size - 1)]
    c = 0
    l = 0
    c_tmp = 0
    l_tmp = 0
    while l_tmp < square_size - 1:
        if l == exept_l:
            l = l + 1
        while c_tmp < square_size - 1:
            if c == exept_c:
                c = c + 1
            matrix_tmp[l_tmp][c_tmp] = matrix_key[l][c]
            c = c + 1
            c_tmp = c_tmp + 1
        c_tmp = 0
        c = 0
        l_tmp = l_tmp + 1
        l = l + 1
    det_m = det_matrix(matrix_tmp, square_size - 1, 0)
    return det_m * det

def resizing(matrix_key, square_size):
    c = 0
    l = 0
    sign = 1
    matrix_tmp = [[0] * (square_size) for _ in range(square_size)]
    while l < square_size:
        while c < square_size:
            if square_size % 2 == 0:
                if c == 0 and l > 0:
                    sign = sign * -1
                matrix_tmp[l][c] = sign * matrix_key[c][l]
            else:
                matrix_tmp[c][l] = sign * matrix_key[l][c]
            c = c + 1
            sign = sign * -1
        c = 0
        l = l + 1
    return matrix_tmp

def matrix_inverse(det, square_size, matrix_key):
    c = 0
    l = 0
    matrix_tmp = [[0] * (square_size) for _ in range(square_size)]
    while l < square_size:
        while c < square_size:
            matrix_tmp[l][c] = matrix_det(matrix_key, det, square_size, c, l)
            c = c + 1
        c = 0
        l = l + 1
    matrix_tmp = resizing(matrix_tmp, square_size)
    return matrix_tmp

def add_nbr(nbr):
    if nbr == 32:
        nbr = 97
    elif nbr == 59:
        nbr = 65
    elif nbr == 90:
        nbr = 97
    elif nbr == 0:
        nbr = 32
    else:
        nbr = nbr + 1
    return nbr

def breaking_3_key(matrix_msg, msg):
    a = 32
    b = 32
    c = 32
    d = 32
    e = 32
    f = 32
    g = 32
    h = 0
    i = 0
    while d != 122:
        matrix_tmp = [[0] * (3) for _ in range(3)]
        matrix_tmp[0][0] = a
        matrix_tmp[0][1] = b
        matrix_tmp[0][2] = c
        matrix_tmp[1][0] = d
        matrix_tmp[1][1] = e
        matrix_tmp[1][2] = f
        matrix_tmp[2][0] = g
        matrix_tmp[2][1] = h
        matrix_tmp[2][2] = i
        print matrix_tmp
        det = det_matrix(matrix_tmp, 3, 0)
        if det != 0:
            det = Fraction(1, det)
            matrix_key = [[0] * (3) for _ in range(3)]
            matrix_key = matrix_inverse(det, square_size, matrix_tmp)
            decrypting(size(msg, 3), 3, matrix_key, matrix_msg)
        a = add_nbr(a)
        if a == 122:
            a = 32
            b = add_nbr(b)
            if b == 122:
                b = 32
                c = add_nbr(c)
                if c == 122:
                    c = 32
                    d = add_nbr(d)
                    if d == 122:
                        print str(e) + " " + str(f) + " " + str(g) + " " + str(h) +" " + str(i)
                        d = 32
                        e = add_nbr(e)
                        if e == 122:
                            e = 32
                            f = add_nbr(f)
                            if f == 122:
                                f = 32
                                g = add_nbr(g)
                                if g == 122:
                                    g = 0
                                    h = add_nbr(h)
                                    if h == 122:
                                         h = 0
                                         i = add_nbr(i)

def breaking_2_key(matrix_msg, msg):
    a = 32
    b = 32
    c = 32
    d = 0
    while d != 122:
        matrix_tmp = [[0] * (2) for _ in range(2)]
        matrix_tmp[0][0] = a
        matrix_tmp[0][1] = b
        matrix_tmp[1][0] = c
        matrix_tmp[1][1] = d
        det = calcul_det(matrix_tmp)
        if det != 0:
            det = Fraction(1, det)
            matrix_key = [[0] * (2) for _ in range(2)]
            matrix_key[0][0] = det * matrix_tmp[1][1]
            matrix_key[1][1] = det * matrix_tmp[0][0]
            matrix_key[0][1] = det * -1 * matrix_tmp[0][1]
            matrix_key[1][0] = det * -1 * matrix_tmp[1][0]
            decrypting(size(msg, 2), 2, matrix_key, matrix_msg)
        a = add_nbr(a)
        if a == 123:
            a = 32
            b = add_nbr(b)
            if b == 123:
                #print unichr(c) + " " + unichr(d)
                b = 32
                c = add_nbr(c)
                if c == 123:
                    c = 32
                    d = add_nbr(d)

if len(sys.argv) == 3:
    if int(sys.argv[1]) == 2:
        suite = raw_input("Are you sure to want launch a server ? (y or n) : ")
        if suite == 'y':
            print "/!\\ Researching message only with 2*2 key /!\\"
            server_lauch(sys.argv[2])
        print "/!\\ Stopping research /!\\"
elif len(sys.argv) == 4:
    key = sys.argv[3]
    flag = int(sys.argv[1])
    square_size = size_square(key)
    key = square_zero(key, square_size)
    matrix_key = [[0] * square_size for _ in range(square_size)]
    matrix_key = matrix_create(square_size, square_size, matrix_key, key, 0)
    if flag == 0:
        msg = sys.argv[2]
        msg = with_zero(msg, square_size)
        matrix_msg = [[0] * square_size for _ in range(size(msg, square_size))]
        matrix_msg = matrix_create(size(msg, square_size), square_size, matrix_msg, msg, 0)
        print "Key matrix :"
        print_matrix(square_size, size(key, square_size), matrix_key, 0)
        print "Encrypted message :"
        crypting(size(msg, square_size), square_size, matrix_key, matrix_msg)
    elif flag == 1:
        msg = [int(x) for x in sys.argv[2].split()]
        msg = with_zero_bis(msg, square_size)
        matrix_msg = [[0] * square_size for _ in range(size(msg, square_size))]
        matrix_msg = matrix_create(size(msg, square_size), square_size, matrix_msg, msg, 1)
        det = det_matrix(matrix_key, square_size, 0)
        if det == 0:
            print "Invalid Key (non inversible)"
        else:
            det = Fraction(1, det)
            matrix_tmp = matrix_key[0][0]
            if square_size == 2:
                matrix_key[0][0] = det * matrix_key[1][1]
                matrix_key[1][1] = det * matrix_tmp
                matrix_key[0][1] = det * -1 * matrix_key[0][1]
                matrix_key[1][0] = det * -1 * matrix_key[1][0]
            else:
                matrix_key = matrix_inverse(det, square_size, matrix_key)
            print "Key matrix :"
            print_matrix(square_size, size(key, square_size), matrix_key, 1)
            print "Decrypted message :"
            decrypting(size(msg, square_size), square_size, matrix_key, matrix_msg)

